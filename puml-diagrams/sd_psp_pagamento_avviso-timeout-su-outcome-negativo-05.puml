@startuml outcomeKOTimeout
title Timeout su outcome negativo

participant pagoPA
participant PSP

== Activate ==

PSP -> pagoPA: activatePaymentNotice req
activate pagoPA
pagoPA -> pagoPA: Generazione token (<color blue>token</color>)
pagoPA --> PSP: activatePaymentNotice res (<color blue>token</color>)
deactivate pagoPA

== Outcome timeout ==

PSP ->x pagoPA: sendPaymentOutcome req (<color blue>token</color>, outcome=<color red>KO</color>)
note right: In caso di mancata risposta \n il PSP deve avviare un processo di retry\n anche se si tratta di un esito negativo

loop retry
    PSP ->x pagoPA: sendPaymentOutcome req (<color blue>token</color>, outcome=<color red>KO</color>)
end

== Outcome ==

alt token valido
    PSP -> pagoPA: sendPaymentOutcome req (<color blue>token</color>, outcome=<color red>KO</color>)
    activate pagoPA
    pagoPA --> PSP: sendPaymentOutcome res (<color green>OK</color>)
    deactivate pagoPA
    note right: -La conferma del mancato pagamento avviene\n prima della scadenza del token\n-L'OK conferma al PSP che la piattaforma\n pagoPA ha ricevuto l'informazione correttamente
else token scaduto
    PSP -> pagoPA: sendPaymentOutcome req (<color blue>token</color>, outcome=<color red>KO</color>)
    activate pagoPA    
    pagoPA --> PSP: sendPaymentOutcome res (<color green>PPT_TOKEN_SCADUTO</color>)
    deactivate pagoPA
    note right: -La conferma del mancato pagamento avviene\n dopo la scadenza del token\n-La piattaforma pagoPA ha quindi la conferma anche da parte del PSP\n del mancato incasso 
else doppio pagamento
    PSP -> pagoPA: sendPaymentOutcome req (<color blue>token</color>, outcome=<color red>KO</color>)
    activate pagoPA    
    pagoPA --> PSP: sendPaymentOutcome res (<color red>PPT_PAGAMENTO_DUPLICATO</color>)
    deactivate pagoPA
    note right: -La conferma del mancato pagamento avviene\n dopo la scadenza del token
end


@enduml
